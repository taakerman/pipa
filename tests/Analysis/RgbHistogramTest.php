<?php

/*
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 * PARTICULAR PURPOSE. 
 * 
 * You may copy and reuse as you please
 */

namespace Taakerman\Pipa\Analysis;

use Taakerman\Pipa\Analysis\RgbHistogram;

use Taakerman\Pipa\PipaUnitTest;

class RgbHistogramTest extends PipaUnitTest {
    private $H_RED= array(0,0,0,0,0,0,0,0,0,0,0,0,1,1,4,1,2,1,5,7,2,4,2,6,1,10,3,5,5,5,10,6,4,16,21,15,18,23,26,31,28,30,32,41,31,40,41,47,42,44,43,59,62,62,63,53,61,71,63,80,84,86,91,84,95,97,94,109,103,115,127,120,138,137,139,129,156,167,167,144,173,196,172,187,178,231,209,234,229,269,255,262,303,337,321,354,357,345,347,317,304,289,269,278,258,255,273,269,284,274,277,283,286,293,286,333,319,339,342,322,338,361,372,398,407,409,445,430,431,435,449,453,543,683,604,635,689,696,793,799,989,1217,1092,1048,923,910,1031,1139,1247,1143,1202,1225,1212,1473,1410,1104,1091,1166,1196,1179,1676,1356,1631,2497,1785,1289,1057,1000,1101,1056,974,1045,1389,1258,1268,1496,1070,1208,1299,1202,1338,1652,1602,1614,1915,1832,2124,2233,2121,2178,2489,2334,2541,2759,2726,3510,4546,4931,6068,5859,5641,7067,6834,7459,8509,10442,7162,6469,6418,4937,5295,6293,2867,2431,2193,1797,2317,1901,1812,1596,1150,1084,625,542,498,481,519,488,592,554,557,566,542,542,527,548,512,559,532,533,553,495,490,424,399,385,349,359,340,394,450,442,547,646,616,605,);
    private $H_GREEN = array(0,0,1,1,0,2,0,3,1,7,9,16,22,25,46,60,74,70,81,88,88,127,128,145,169,161,188,183,208,212,251,263,282,327,316,398,359,415,419,443,443,460,440,378,355,330,378,327,342,367,353,372,357,364,362,380,378,371,396,428,341,409,414,462,437,456,437,427,492,479,475,428,482,443,475,478,445,452,454,432,468,412,426,444,413,441,409,387,412,417,362,370,381,381,366,372,390,359,350,359,361,375,376,372,404,344,353,370,382,414,373,441,406,418,510,658,613,617,701,787,1013,1198,1075,1035,1000,1062,1368,1185,1029,1172,1161,1258,1625,1548,1168,1207,1188,1164,1716,1357,1681,2495,1816,1325,1075,1038,1170,1106,1124,1220,1582,1396,1473,1789,1276,1342,1535,1453,1512,1935,1731,1648,2032,2114,2146,2234,2221,2091,2388,2511,2536,2519,2635,2549,2769,3303,3964,4553,5720,5065,5328,6422,4858,4778,5771,5833,6705,8807,6663,5675,5531,4221,3495,3613,3180,4108,1973,1404,1162,1426,2010,1253,1492,1218,866,371,335,314,285,261,224,192,188,104,32,11,5,1,2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,);
    private $H_BLUE = array(86,45,62,126,162,201,295,330,376,465,462,568,597,562,683,695,765,768,793,802,798,803,836,778,850,763,785,744,685,687,686,646,671,623,583,552,540,499,473,475,439,525,443,426,428,412,417,445,432,384,389,370,377,390,399,413,345,375,361,374,319,370,363,343,371,339,337,335,347,333,299,294,319,304,302,350,350,374,368,318,350,294,296,336,374,390,383,368,428,457,472,662,623,622,705,860,1088,1297,1182,1127,1128,1255,1563,1378,1345,1393,1325,1525,1894,1482,1324,1402,1406,1412,1930,1638,1852,2660,2034,1451,1306,1170,1309,1233,1193,1233,1669,1536,1538,1828,1358,1481,1797,1692,1840,2139,2010,1861,2313,2364,2337,2352,2409,2262,2531,2534,2546,2431,2344,2518,3196,3446,4137,4932,4798,4696,5476,4599,3592,4298,4875,5204,6717,8131,5488,5044,4488,2972,3058,3043,1928,2787,3831,1465,1131,770,979,1785,1110,1107,877,381,524,447,497,114,24,3,1,0,1,2,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,);
    
    public function testRgbHistogram() {
        $image = $this->load('alyson.jpg');
        $this->assertNotNull($image);
        
        $hist = RgbHistogram::calculate($image);
        $this->assertNotNull($hist);
        $this->assertEquals($this->H_RED, $hist[0]);
        $this->assertEquals($this->H_GREEN, $hist[1]);
        $this->assertEquals($this->H_BLUE, $hist[2]);

        //$visualization = Visualizer::visualizeRgbHistogram($histogram);
        //$visualization->save(__DIR__ . '/rgb_histogram.png');
    }
    
    public function testChannels() {
        $image = $this->load('alyson.jpg');
        $this->assertNotNull($image);
        
        $hist = RgbHistogram::calculateChannel($image, RgbHistogram::CHANNEL_R);
        $this->assertEquals($this->H_RED, $hist);
        
        $hist = RgbHistogram::calculateChannel($image, RgbHistogram::CHANNEL_G);
        $this->assertEquals($this->H_GREEN, $hist);
        
        $hist = RgbHistogram::calculateChannel($image, RgbHistogram::CHANNEL_B);
        $this->assertEquals($this->H_BLUE, $hist);
    }
}
