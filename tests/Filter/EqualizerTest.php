<?php

/*
 * THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
 * KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
 * PARTICULAR PURPOSE. 
 * 
 * You may copy and reuse as you please
 */

namespace Taakerman\Pipa\Filter;

use Taakerman\Pipa\Filter\Equalizer;
use Taakerman\Pipa\Analysis\Histogram;

use Taakerman\Pipa\PipaUnitTest;

class EqualizerTest extends PipaUnitTest {
    private $ORIGINAL_EXPECTED = array(0,0,0,0,0,0,0,1,1,2,3,5,8,5,9,14,9,15,12,35,35,47,53,56,64,62,55,79,84,86,103,124,109,124,132,143,150,169,167,194,189,188,219,225,250,250,257,254,333,358,338,360,391,426,445,409,387,397,360,319,352,327,316,324,325,348,321,341,356,373,353,366,347,396,372,387,380,468,387,470,489,474,462,483,475,513,453,490,497,467,508,458,473,454,451,407,371,427,405,423,405,433,385,437,424,387,378,391,409,409,381,365,397,399,388,439,482,506,637,712,606,706,759,1022,1183,1083,980,991,918,1138,1382,1065,1134,1232,1127,1349,1717,1188,1091,1159,1190,1139,1688,1362,1604,2500,1822,1286,1079,1006,1042,1048,1077,1085,1464,1293,1310,1625,1236,1242,1501,1446,1559,1886,1860,1815,2082,2256,2367,2479,2330,2299,2721,2499,2593,2743,2647,2707,3647,3995,4777,5791,5070,5435,6625,4936,4888,5906,6099,6972,9429,6337,5627,5690,4070,3731,4729,4458,2148,2022,1383,1376,2222,1525,1343,1322,924,770,372,256,267,289,270,280,280,267,339,347,315,312,300,231,110,30,5,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,);
    private $EQUALIZED_EXPECTED = array(799,1016,893,699,951,954,1032,1113,1060,1016,866,881,927,922,919,936,961,962,916,936,888,852,864,747,746,738,730,720,692,659,702,739,824,1077,932,922,921,1117,1384,1199,1147,1136,893,1046,939,1482,1167,1220,1232,773,753,1318,1129,903,1145,1040,1036,358,1047,1026,1422,402,1164,301,1471,320,2236,316,1574,1180,850,854,289,865,850,898,693,478,1131,1047,338,933,317,1382,840,925,434,1137,836,478,903,455,1452,344,1278,1118,410,1245,732,678,943,1021,1065,419,1770,333,1604,484,1003,1080,266,1427,961,928,1451,221,1361,1184,1069,1020,917,899,1041,941,866,925,740,1560,1795,155,977,1233,2136,426,818,1053,604,2585,1161,400,988,311,304,3734,1100,757,527,290,2707,1273,353,962,470,302,3255,794,398,1450,284,380,3360,1475,1130,277,389,413,2456,436,1380,430,355,1640,965,246,2755,495,461,321,1454,599,3662,430,227,246,533,235,1448,408,4765,224,290,177,1453,395,115,126,131,6860,477,235,1463,389,227,4209,98,389,813,616,199,85,3810,620,359,782,88,167,4274,937,176,253,2820,538,524,382,2128,1085,314,321,223,4078,314,176,1106,685,2656,895,1069,939,959,638,620,1034,546,1542,1304,269,987,1161,720,794,190,268,288,685,696,559,);

    public function testRgb() {
        // easy to see that they differ, no need to assert that they are not equal
        // it is obvious that equalized is far more 'equal', hehe
        $image = $this->load('alyson.jpg');
        $histOriginal = Histogram::calculate($image);
        $this->assertEquals($this->ORIGINAL_EXPECTED, $histOriginal);
        
        $equalized = Equalizer::rgb($image);
        $histEqualized = Histogram::calculate($equalized);
        $this->assertEquals($this->EQUALIZED_EXPECTED, $histEqualized);
    }
}
